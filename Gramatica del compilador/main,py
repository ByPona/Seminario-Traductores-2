class Terminal(object):
    def __init__(self, cadena, id):
        self.cadena = cadena
        self.id = id

    def __str__(self):
        return "%s - %s" % (self.cadena, self.id)

    def darcadena(self):
        return self.cadena

    def darid(self):
        return self.id

class NoTerminales(object):
    def __init__(self, simbolo, regla):
        self.simbolo = simbolo
        self.regla = regla

    def __str__(self):
        return "%s - %s" % (self.simbolo, self.regla)

class Estado(object):
    def __init__(self, estado):
        self.estado = estado

    def __str__(self):
        return "%s" % (self.estado)
        
    def darid(self):
        return self.estado

class Regla:
    def __init__(self, varaux = None,num= None, num_va= None, nombre = None):
        self.varaux = varaux
        self.num = num
        self.numva = num_va
        self.nombre = nombre

    def __str__(self):
        return ("%s %s %s") % (self.num, self.numva, self.nombre)

listaReglas = list()
matriz = list()

def cargarMatriz():
    archivo = open("compilador.lr","r")
    lineas = archivo.readlines()
    #print(lineas)
    for linea in lineas:
        linea = linea.rstrip()
        matriz.append(linea.split("\t"))
        
        #convertir matriz
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            matriz[i][j] = int(matriz[i][j])
    #print(matriz)
    archivo.close()

def cargarReglas():

    archivo = open("reglas.txt","r")
    aux = []
    lineas = archivo.readlines()
    for linea in lineas: 
        linea = linea.rstrip()
        aux.append(linea.split("\t"))

    #convertir datos 
    i=0
    for regla in aux:
        i+=1
        regla = Regla(i, int (regla[0]), int (regla[1]), str(regla[2]))
        listaReglas.append(regla)
        
    archivo.close()

def analizadorsintactico():
    while True:
        fila = pila[-1].darid()
        columna = lista[0].darid()
        accion = matriz[fila][columna]
        accion = Estado(accion)
        print(accion)
        if accion.darid() == 0:
            print("Error")
            break
        elif accion.darid()>0:
            print("Desplazamiento")
            pila.append(columna)
            pila.append(accion)
            lista.pop(0)
        elif accion.darid()<0:
            print("Regla")
            print(accion)
            if accion.darid()==-1:
                print("Aceptado")
                break
            else:
                for obj in listaReglas:
                    if accion.darid() == (obj.varaux+1)*-1:
                        accion = matriz[fila][obj.num]
                        accion = Estado(accion)
                        if obj.numva != 0:
                            eliminar = obj.numva *2
                            while eliminar != 0:
                                pila.pop()
                                eliminar-=1
                            fila = pila[-1].darid()
                            accion = matriz[fila][obj.num]
                            accion = Estado(accion)
                            pila.append(obj.nombre)
                            pila.append(accion)
                        else:
                            pila.append(obj.nombre)
                            pila.append(accion)
                        break

def evaluarcadena():
    cadena = input("Dame la cadena a analizar: ")
    lista = list()

    contador = 0
    longitud = len(cadena)
    cadena = cadena + " "
    cadena_resultante = ""

    while contador < longitud:
        cadena_resultante = ""
        activador = 0
        if cadena[contador].isalpha() == True:
            #print(cadena[contador])
            while cadena[contador].isalpha() == True or cadena[contador].isdigit() == True:
                if cadena[contador] == " ":
                    break
                cadena_resultante = cadena_resultante + cadena[contador]
                contador = contador+1
                if contador==longitud:
                    break
            if cadena_resultante == "if":
                objeto = Terminal(cadena_resultante, 19)
                lista.append(objeto)
            elif cadena_resultante == "while":
                objeto = Terminal(cadena_resultante, 20)
                lista.append(objeto)
            elif cadena_resultante == "return":
                objeto = Terminal(cadena_resultante, 21)
                lista.append(objeto)
            elif cadena_resultante == "else":
                objeto = Terminal(cadena_resultante, 22)
                lista.append(objeto)
            elif cadena_resultante == "int":
                objeto = Terminal(cadena_resultante, 4)
                lista.append(objeto)
            elif cadena_resultante == "float":
                objeto = Terminal(cadena_resultante, 4)
                lista.append(objeto)
            elif cadena_resultante == "void":
                objeto = Terminal(cadena_resultante, 4)
                lista.append(objeto)
            else:
                objeto = Terminal(cadena_resultante, 0)
                lista.append(objeto)

        elif cadena[contador].isdigit() == True:
            while cadena[contador].isdigit() == True or cadena[contador] == ".":
                if cadena[contador] == ".":
                    activador = 1
                cadena_resultante = cadena_resultante + cadena[contador]
                contador = contador+1
                if contador==longitud:
                    break
            if activador == 1:
                objeto = Terminal(cadena_resultante, 2)
            else:
                objeto = Terminal(cadena_resultante, 1)
            lista.append(objeto)
                
            
        elif cadena[contador] == "+" or cadena[contador] == "-":
            cadena_resultante = cadena[contador]
            objeto = Terminal(cadena_resultante, 5)
            lista.append(objeto)
            contador = contador +1
            
        elif cadena[contador] == "|" and cadena[contador+1] == "|":
            cadena_resultante = cadena[contador] + cadena[contador+1]
            objeto = Terminal(cadena_resultante, 8)
            lista.append(objeto)
            contador = contador +2

        elif cadena[contador] == "&" and cadena[contador+1] == "&":
            cadena_resultante = cadena[contador] + cadena[contador+1]
            objeto = Terminal(cadena_resultante, 9)
            lista.append(objeto)
            contador = contador +2
            
        elif cadena[contador] == "*" or cadena[contador] == "/":
            cadena_resultante = cadena[contador]
            objeto = Terminal(cadena_resultante,6)
            lista.append(objeto)
            contador = contador +1

        elif (cadena[contador] == "<" and cadena[contador+1] == "=") or (cadena[contador] == ">" and cadena[contador+1] == "="):
            cadena_resultante = cadena[contador] + cadena[contador+1]
            objeto = Terminal(cadena_resultante, 7)
            lista.append(objeto)
            contador = contador +2

        elif (cadena[contador] == "=" and cadena[contador+1] == "=") or (cadena[contador] == "!" and cadena[contador+1] == "="):
            cadena_resultante = cadena[contador] + cadena[contador+1]
            objeto = Terminal(cadena_resultante, 11)
            lista.append(objeto)
            contador = contador +2

        elif cadena[contador] == "<" or cadena[contador] == ">":
            cadena_resultante = cadena[contador]
            objeto = Terminal(cadena_resultante, 7)
            lista.append(objeto)
            contador = contador + 1

        elif cadena[contador] == "$":
            cadena_resultante = "$"
            objeto = Terminal(cadena_resultante, 23)
            lista.append(objeto)
            contador = contador + 1
            
        elif cadena[contador] == ";":
            cadena_resultante = ";"
            objeto = Terminal(cadena_resultante, 12)
            lista.append(objeto)
            contador = contador + 1
            
        elif cadena[contador] == ",":
            cadena_resultante = ","
            objeto = Terminal(cadena_resultante, 13)
            lista.append(objeto)
            contador = contador + 1

        elif cadena[contador] == "!":
            cadena_resultante = "!"
            objeto = Terminal(cadena_resultante, 10)
            lista.append(objeto)
            contador = contador + 1
            
        elif cadena[contador] == "(":
            cadena_resultante = "("
            objeto = Terminal(cadena_resultante, 14)
            lista.append(objeto)
            contador = contador + 1
            
        elif cadena[contador] == ")":
            cadena_resultante = ")"
            objeto = Terminal(cadena_resultante, 15)
            lista.append(objeto)
            contador = contador + 1
            
        elif cadena[contador] == "{":
            cadena_resultante = "{"
            objeto = Terminal(cadena_resultante, 16)
            lista.append(objeto)
            contador = contador + 1

        elif cadena[contador] == "}":
            cadena_resultante = "}"
            objeto = Terminal(cadena_resultante, 17)
            lista.append(objeto)
            contador = contador + 1
            
        elif cadena[contador] == "=":
            cadena_resultante = "="
            objeto = Terminal(cadena_resultante, 18)
            lista.append(objeto)
            contador = contador + 1

        elif cadena[contador] == " ":
            contador = contador + 1

        else:
            contador = contador+1
    return lista




cargarMatriz()
cargarReglas()



lista = list()
pila = list()
lista = evaluarcadena()
objeto = Terminal("$", 23)
lista.append(objeto)
pila.append(objeto)
objeto = Estado(0)
pila.append(objeto)

analizadorsintactico()
